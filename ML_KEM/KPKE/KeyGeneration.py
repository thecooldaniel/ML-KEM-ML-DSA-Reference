from os import urandom

from ML_KEM.helpers import poly_add, modq
from ML_KEM.parameters import MLKEM_512 as params

from ML_KEM.Auxiliary.ConversionCompression import ByteEncode
from ML_KEM.Auxiliary.CryptoFunctions import G, PRF, XOF
from ML_KEM.Auxiliary.NTT import NTT, MultiplyNTTs
from ML_KEM.Auxiliary.Sampling import SampleNTT, SamplePolyCBD

from rich import print
from rich.panel import Panel

# Test values from C ref impl
static_seed = 0x8CDE0C16E69FD32881FD56B8926F06AF5DE861298490F404B27234767F176EB0.to_bytes(32, 'little')
c_hash_g = 0x855DD1E6847BB6E28483F21626785165F707ABEFE6571F4E39FB01EA883023533696F7DC6738DC5039ABB7A56854A54581F77A416DF07D4E799BC18BFB004F16
AC512 = [[[[None] * 256] for i in range(0, 2)] for j in range(0, 2)]
AC512[0][0] = [0x04B4,0x026E,0x033C,0x00FF,0x090E,0x01F9,0x05CB,0x093B,0x0590,0x0670,0x063B,0x0759,0x0A9F,0x08CF,0x01CA,0x01DE,
0x015F,0x03B4,0x0B64,0x0BF8,0x0533,0x0259,0x0964,0x0026,0x0AC8,0x0291,0x026E,0x0816,0x0985,0x0271,0x0350,0x057B,
0x0985,0x0802,0x0B25,0x0420,0x0013,0x04B4,0x00D2,0x053E,0x0CF0,0x0B44,0x07FA,0x02E5,0x076E,0x0871,0x041F,0x063A,
0x08A2,0x0666,0x03F7,0x093B,0x0A5B,0x0210,0x0A4C,0x01C0,0x08E4,0x0875,0x0842,0x0421,0x0424,0x04DE,0x028C,0x01F8,
0x05D0,0x02D5,0x0C0E,0x0AE4,0x0801,0x025B,0x0246,0x085F,0x09DF,0x04BA,0x0181,0x05F9,0x02C5,0x09EE,0x04DC,0x0007,
0x0C3F,0x00C9,0x0C39,0x09E5,0x08E9,0x056F,0x0807,0x0A6B,0x09E1,0x07D5,0x0546,0x0AC8,0x07F3,0x0862,0x0C4F,0x0B3D,
0x09CF,0x00F1,0x0CB2,0x0C8C,0x0334,0x0B32,0x0AE1,0x0B8E,0x0386,0x0B25,0x02C2,0x0225,0x076D,0x0AEB,0x06F2,0x088E,
0x09AE,0x0508,0x007D,0x099B,0x02F0,0x078A,0x0AED,0x0839,0x0A89,0x03CA,0x0C5B,0x0CB6,0x0801,0x027C,0x0849,0x0537,
0x044A,0x0B54,0x05CA,0x0338,0x0840,0x0726,0x0C5F,0x0AA8,0x04B5,0x0CBD,0x0938,0x01C9,0x012D,0x0B4A,0x0AAF,0x0B2E,
0x096D,0x03BF,0x0B6E,0x0701,0x05CB,0x0A36,0x02D7,0x0C4E,0x0655,0x0AF5,0x0AFA,0x0CDD,0x0AE1,0x02B7,0x0213,0x0531,
0x064F,0x00BD,0x0672,0x0796,0x0483,0x08E6,0x055A,0x0C8E,0x0574,0x03A6,0x02A9,0x03C5,0x03B7,0x0940,0x0B4C,0x0B16,
0x06C3,0x0C7C,0x0729,0x0BAB,0x0BB3,0x0329,0x0776,0x06F0,0x06AF,0x0AAA,0x0945,0x0230,0x045D,0x0647,0x02DC,0x0968,
0x061A,0x08AA,0x0213,0x0688,0x081D,0x01AE,0x0A48,0x0064,0x06AD,0x0BA2,0x02EA,0x05FF,0x001D,0x0953,0x0AF3,0x08EA,
0x03B4,0x000A,0x033D,0x073F,0x0855,0x0937,0x0A16,0x080C,0x0509,0x08C6,0x0C76,0x0BAD,0x05F9,0x0CDB,0x0BC4,0x0342,
0x0960,0x079C,0x0802,0x079A,0x0BF0,0x07B1,0x02C3,0x0B8C,0x07FF,0x0AAF,0x0B89,0x051C,0x095F,0x088C,0x0C79,0x0123,
0x007B,0x0439,0x02D5,0x0707,0x0415,0x04A0,0x09D7,0x0B5B,0x0A23,0x0CC3,0x01AA,0x0903,0x09D5,0x0599,0x0CB5,0x07BF,
]

AC512[0][1] = [0x0CF6,0x0C3C,0x0129,0x0CEB,0x0BFC,0x07D8,0x0A69,0x0305,0x0890,0x0ACE,0x0708,0x05F2,0x0C01,0x09E6,0x096F,0x0B7B,
0x0830,0x0CC0,0x07B7,0x012C,0x0697,0x075B,0x044E,0x00CC,0x0B4C,0x0AC7,0x07EC,0x0230,0x043D,0x0A08,0x03F6,0x0985,
0x0018,0x042B,0x0ADF,0x0933,0x0A90,0x0570,0x09B2,0x060D,0x0192,0x08AF,0x0B96,0x0BD2,0x01AB,0x0060,0x0AD8,0x0190,
0x03B7,0x0BDF,0x021D,0x08C8,0x0436,0x076E,0x060C,0x091C,0x082F,0x0341,0x058A,0x0B1C,0x01B7,0x0B35,0x078D,0x0C00,
0x0322,0x0ACB,0x00B4,0x02D0,0x0BDC,0x069E,0x0B27,0x050F,0x0869,0x0BB5,0x06E3,0x0B1D,0x0917,0x08C0,0x02CD,0x0B9E,
0x02CC,0x0247,0x0131,0x0BBF,0x0340,0x0B16,0x055F,0x090D,0x03B0,0x0749,0x0715,0x0171,0x08F8,0x0CFD,0x0BE2,0x0712,
0x0C6F,0x050E,0x0206,0x077B,0x02C5,0x0411,0x03F3,0x0AC7,0x0677,0x0B47,0x058E,0x0313,0x00E1,0x05C2,0x0A1E,0x0248,
0x0535,0x04FE,0x0B71,0x0ACA,0x06F9,0x0662,0x04A8,0x03E7,0x0249,0x06F6,0x0920,0x024A,0x01F1,0x0AA3,0x0457,0x052A,
0x0A31,0x0931,0x0254,0x07B8,0x0427,0x03A3,0x0C3B,0x05D4,0x01FC,0x0A03,0x08F0,0x0020,0x0972,0x0BCD,0x0931,0x0610,
0x0983,0x00A8,0x02CB,0x0AFD,0x09BB,0x04A4,0x0CC8,0x0CC6,0x05FF,0x02AB,0x0765,0x07B7,0x04E0,0x0805,0x02E7,0x03E5,
0x016C,0x09FF,0x042C,0x02CF,0x0655,0x02B7,0x0823,0x0938,0x00FB,0x0A5B,0x0550,0x05EC,0x059A,0x022D,0x01E4,0x0283,
0x0886,0x0912,0x07CC,0x0361,0x02A9,0x0042,0x09CC,0x0691,0x07F5,0x0743,0x0AAC,0x057D,0x0966,0x0C3C,0x0848,0x0C4D,
0x06D5,0x00AE,0x022B,0x05BC,0x01A0,0x018C,0x072A,0x0A93,0x00E0,0x038E,0x0B9C,0x0156,0x0388,0x09CC,0x0795,0x004E,
0x0A7E,0x087E,0x0C8B,0x09A9,0x05DF,0x077C,0x0431,0x031B,0x0861,0x0C90,0x060C,0x03B1,0x035C,0x03D2,0x0C0F,0x0130,
0x032F,0x0B5F,0x094C,0x02D1,0x0880,0x0877,0x0C78,0x0C19,0x05E9,0x021A,0x01CD,0x0602,0x0CEA,0x0B0E,0x021E,0x0C7E,
0x01A0,0x09A3,0x0539,0x08AD,0x0159,0x025F,0x05D2,0x0181,0x08A7,0x095E,0x0C86,0x00FA,0x007E,0x04CB,0x0606,0x07DC,
]

AC512[1][0] = [0x0C62,0x0215,0x035B,0x0BFB,0x06DF,0x09FD,0x00AE,0x0291,0x0C62,0x07EA,0x07C0,0x063A,0x0098,0x0722,0x09D6,0x09F1,
0x0356,0x038C,0x010E,0x0AC4,0x00D3,0x018B,0x0388,0x035D,0x05B4,0x04DB,0x063C,0x0BEE,0x06B4,0x0332,0x0A67,0x08F4,
0x06ED,0x04E8,0x0190,0x0CE5,0x0B67,0x06FA,0x0066,0x0351,0x0023,0x087D,0x0A95,0x0902,0x0CD9,0x0C1C,0x06F3,0x0A7C,
0x0CC3,0x01A5,0x0C93,0x0930,0x08AE,0x0A0F,0x0203,0x0A85,0x070E,0x05B6,0x0997,0x0778,0x0238,0x0521,0x01D1,0x0870,
0x0B7E,0x0A92,0x0857,0x09E8,0x06EA,0x01F9,0x04E1,0x07AD,0x0100,0x006E,0x0607,0x0B7B,0x0654,0x06F5,0x0ABC,0x02D8,
0x0859,0x09E4,0x0AA2,0x079B,0x07BB,0x0923,0x0BAB,0x0AC1,0x0742,0x0C84,0x07E0,0x0B0A,0x008B,0x04E2,0x0710,0x0C0B,
0x00E2,0x0A63,0x028A,0x0188,0x0318,0x0843,0x07A6,0x0A1C,0x0200,0x0154,0x0926,0x0BEF,0x08B0,0x00A9,0x05F6,0x0B21,
0x070E,0x0224,0x0219,0x06B4,0x0291,0x0B54,0x06EE,0x08FA,0x0832,0x0165,0x051E,0x0C8E,0x086D,0x091F,0x03AB,0x0086,
0x07A9,0x0A7E,0x005F,0x092F,0x06AA,0x0995,0x0844,0x0055,0x05ED,0x002E,0x044D,0x03B5,0x0777,0x08D1,0x0456,0x0091,
0x0A70,0x004D,0x0246,0x0A9C,0x0BFF,0x074D,0x076E,0x013E,0x01DC,0x09B0,0x0803,0x036D,0x0C65,0x03BC,0x0736,0x0310,
0x07B9,0x0564,0x0602,0x0756,0x051B,0x0839,0x080B,0x04C3,0x034A,0x04A1,0x04EE,0x0357,0x04CB,0x02CA,0x0512,0x047B,
0x06BB,0x04BD,0x0AF9,0x06E3,0x0673,0x09BD,0x01A2,0x09AC,0x0170,0x0CD3,0x020E,0x0CD7,0x0512,0x02B6,0x04AC,0x041A,
0x0B5C,0x094C,0x0035,0x00D7,0x067D,0x04F1,0x01F0,0x03F5,0x0169,0x094C,0x0799,0x0171,0x0439,0x06ED,0x02A8,0x04EB,
0x09D9,0x0AA4,0x09DA,0x01F7,0x038A,0x04D3,0x070B,0x0949,0x0BAD,0x009D,0x01D3,0x0762,0x054D,0x013F,0x0A17,0x03E7,
0x045E,0x0646,0x0804,0x0C15,0x08D7,0x02FF,0x02C4,0x09DB,0x0005,0x08F6,0x0670,0x03EA,0x0513,0x0327,0x026A,0x0116,
0x020C,0x0C58,0x0CF9,0x0556,0x013D,0x08D7,0x0B4E,0x04FE,0x0A0F,0x0904,0x04CE,0x00A6,0x021F,0x0867,0x0915,0x05E3,
]

AC512[1][1] = [0x051F,0x03F8,0x0AFC,0x060B,0x0786,0x0845,0x0A7D,0x0AF8,0x0AE6,0x05CC,0x03FE,0x0483,0x01BF,0x0241,0x044C,0x0945,
0x054B,0x07BE,0x060E,0x0630,0x020E,0x08F0,0x075F,0x0656,0x0BEA,0x033C,0x0389,0x0AD1,0x0C98,0x0925,0x07EE,0x0529,
0x0788,0x03D8,0x0905,0x0BB5,0x0CE7,0x099E,0x0B88,0x0985,0x0768,0x07FF,0x06F2,0x07EF,0x0BD4,0x07A1,0x04A1,0x03C2,
0x0AA1,0x0327,0x0850,0x027E,0x05F5,0x05D1,0x06FE,0x0804,0x06C1,0x066C,0x09BE,0x0553,0x02F7,0x0543,0x0A4E,0x0117,
0x0AA3,0x030F,0x079B,0x0433,0x035A,0x009C,0x083B,0x0CFE,0x079D,0x060E,0x0019,0x085F,0x08EA,0x029C,0x0B6D,0x0157,
0x0B07,0x0A49,0x01A8,0x00BF,0x0B56,0x05A6,0x02F5,0x0CAE,0x04CC,0x03BF,0x03AD,0x0A6D,0x0BE0,0x0A5F,0x08B6,0x0983,
0x056D,0x05A5,0x04E4,0x0CEB,0x085F,0x0988,0x000E,0x03F2,0x0BAC,0x0963,0x0C34,0x047F,0x09DF,0x0B3A,0x0CE8,0x036B,
0x0436,0x01D6,0x016E,0x0C8E,0x0AEA,0x0649,0x0656,0x030D,0x0618,0x052C,0x0066,0x02B4,0x04A4,0x069D,0x0A88,0x0976,
0x0327,0x0457,0x0655,0x0493,0x05F1,0x0591,0x09E5,0x0823,0x0794,0x0167,0x019A,0x0A96,0x04B0,0x0C3B,0x0AAB,0x09AE,
0x05AE,0x098D,0x072A,0x0AB9,0x04E6,0x0498,0x0BF2,0x0557,0x0452,0x0B23,0x03AA,0x0A10,0x0095,0x09F9,0x0A48,0x0691,
0x0145,0x0AE0,0x02EE,0x03DC,0x025F,0x04A1,0x0BFD,0x0C03,0x0490,0x010C,0x0760,0x0A72,0x0BD9,0x040A,0x0150,0x0563,
0x054E,0x049B,0x0C00,0x0118,0x033A,0x0793,0x02A9,0x054E,0x06AB,0x055E,0x0845,0x007E,0x00D7,0x074B,0x03CD,0x03A3,
0x08B6,0x009A,0x0669,0x0383,0x018C,0x05AE,0x0816,0x0031,0x0460,0x0479,0x086F,0x0C79,0x03AA,0x0367,0x02B5,0x03BD,
0x0755,0x0329,0x0067,0x053D,0x013E,0x0063,0x0BE1,0x0A4A,0x04AA,0x03D6,0x0B55,0x0CB0,0x00A7,0x07CD,0x01B5,0x0B59,
0x0572,0x08DA,0x05B1,0x0051,0x04CB,0x0308,0x049F,0x0298,0x04C1,0x0B6F,0x0133,0x096B,0x0665,0x06D4,0x0C45,0x0BC9,
0x034B,0x0C9C,0x06D3,0x07BC,0x068E,0x0959,0x0B3C,0x01BF,0x02F4,0x0795,0x0B87,0x04E4,0x0116,0x07CA,0x038D,0x0A08,
]

SC512 = [[None] for i in range(0, params.k)]
SC512[0] = [-2,1,0,-1,0,1,2,0,3,1,0,0,0,1,1,2,
2,2,0,2,-2,-2,2,1,0,-2,-2,1,0,-1,0,0,
2,1,-3,2,-1,-1,-1,2,2,1,0,-1,-1,-2,2,0,
0,3,0,-1,-1,1,0,1,-2,1,1,2,-1,2,2,1,
2,1,1,1,2,0,0,-1,0,-1,-1,1,0,-1,-1,0,
0,1,0,0,0,0,-3,1,-1,2,-1,-2,1,0,-1,2,
1,2,-1,1,0,0,1,-2,1,0,2,1,-1,-1,0,0,
0,-1,0,-1,0,-1,0,-1,-1,-1,2,-1,1,0,-1,1,
-1,1,0,-1,-2,-2,1,0,-2,1,-1,0,0,-2,0,1,
-1,-2,-1,2,-1,-1,2,-1,-1,1,1,2,-1,-1,1,1,
-1,1,-1,0,-2,3,0,0,0,1,-3,-1,0,0,-1,-2,
0,1,1,-2,0,-1,0,-1,1,3,1,0,0,-1,0,0,
-1,0,1,-1,0,0,0,0,-2,-1,1,-1,2,0,0,2,
1,2,0,-1,0,1,0,0,0,2,0,1,0,-1,1,1,
-1,0,-1,1,1,-1,1,2,0,2,-1,2,1,1,-1,-1,
1,0,1,0,-1,-1,-1,-2,3,-1,-1,-1,1,0,-1,0,
]
SC512[1] = [1,1,0,0,1,1,-2,-1,1,-1,0,-1,0,-1,1,1,
0,-2,0,1,-1,1,3,-1,1,0,1,1,-1,-2,-1,-2,
-1,-1,0,0,0,0,2,0,1,1,-1,0,-2,1,-1,-1,
3,1,1,1,1,0,1,0,-1,0,-2,-2,1,-1,1,-3,
0,-1,-3,0,1,-1,0,1,1,0,3,-2,1,0,-1,0,
-1,0,1,0,-1,0,0,0,1,1,1,0,-1,1,1,-1,
-2,1,-1,2,0,0,-1,-2,1,1,1,2,-2,1,-2,-1,
1,-2,-1,1,-1,1,0,0,-2,0,1,0,2,1,-1,3,
0,-1,0,1,2,0,-1,0,-2,-1,2,1,-1,2,1,0,
-1,0,-1,0,-1,-1,0,0,0,0,-1,0,0,-1,1,1,
1,1,-1,-1,-1,-1,1,1,0,-2,0,1,0,1,1,-1,
-2,-1,1,2,1,1,-1,0,0,-1,1,0,1,-1,1,-2,
0,-1,-1,1,3,0,1,1,-3,1,-1,0,1,0,-1,0,
0,2,-1,0,-1,0,1,0,1,-1,0,0,2,-1,1,2,
-1,1,2,1,-1,0,1,0,0,0,0,-2,0,0,-1,-1,
-1,0,2,0,0,-1,2,1,1,1,0,0,-1,0,-2,1,
]

EC512 = [[None] for i in range(0, params.k)]
EC512[0] = [1,0,0,0,1,0,-1,0,-1,-1,0,2,1,0,0,-1,
0,1,-1,0,-1,-1,-1,-1,2,2,0,-2,0,1,-1,0,
1,0,2,-2,-1,-2,-1,0,-1,-2,1,1,2,-1,-2,2,
3,1,0,-1,-1,0,0,1,0,1,0,0,0,0,0,1,
1,0,2,2,2,2,2,-1,-3,1,2,1,0,-1,2,-2,
3,-3,0,-1,-1,1,-1,-1,0,0,-1,0,-2,1,-1,1,
1,-1,-1,-1,-2,1,0,2,-2,2,0,0,0,-2,-3,1,
1,0,0,0,1,0,0,1,-1,0,-1,0,-1,0,-2,0,
-1,-1,3,2,-1,1,1,0,1,0,0,1,0,-1,-2,-1,
-2,-2,1,3,-1,0,-1,2,0,0,0,-1,1,1,0,1,
-2,-1,0,0,1,-1,-2,1,1,-3,0,2,-1,-3,1,0,
1,-1,2,0,0,0,2,2,1,0,1,0,1,-1,2,1,
-1,-2,1,1,0,1,2,-1,-2,1,0,-1,0,-1,-1,1,
-1,1,-1,-2,0,-2,-1,0,-2,-2,2,-1,-2,1,0,-1,
0,2,1,-1,0,0,-1,1,0,0,0,1,-2,1,0,-1,
2,-1,1,1,-1,1,-3,-2,-1,-1,-2,0,-1,1,0,-1,
]
EC512[1] = [0,-2,-1,-2,1,0,-1,-3,1,1,0,1,-1,-1,1,2,
-1,-1,1,-1,1,1,0,-1,0,0,0,0,-1,1,0,-1,
0,-1,-1,0,1,1,1,0,2,0,0,0,0,0,-1,-1,
-1,0,1,3,1,0,0,-1,-2,2,1,0,1,0,-2,1,
0,1,2,-1,0,2,-1,-2,2,1,-1,2,1,-1,-2,1,
2,-1,-1,0,-1,-1,-3,0,1,-1,0,0,0,0,1,-2,
1,-2,0,0,1,0,0,2,0,-2,-1,1,0,0,-1,0,
0,1,-1,0,-1,-1,0,-1,0,1,-1,2,3,-1,0,-1,
-1,-2,-1,-1,0,0,2,1,2,1,-1,-2,0,0,0,1,
1,0,0,-1,0,0,0,1,0,0,0,1,1,2,-1,1,
1,0,0,1,0,-1,-1,1,1,2,0,0,2,0,1,0,
0,-1,0,1,-1,0,1,0,0,0,1,1,1,2,-1,-1,
-2,-1,0,2,0,-1,2,1,0,0,0,1,1,-1,-2,0,
0,0,0,-1,-2,0,2,1,0,1,-1,-1,1,2,-1,-2,
0,1,-1,0,-1,1,0,0,0,0,1,0,-1,0,2,0,
1,1,-1,0,0,2,3,-1,2,1,-1,1,-2,-1,-2,2,
]

SHC512 = [[None] for i in range(0, params.k)]
SHC512[0] = [-1539,120,-829,579,1120,-36,1617,-422,-236,700,-312,-498,1491,39,836,-264,
23,-282,-1011,-886,-482,-1475,972,1432,1267,-718,1162,1250,288,-758,-762,140,
-1094,1291,1457,-414,1291,1077,-324,149,-969,-62,-702,-844,1599,-1020,-225,91,
-1584,-901,-1081,-1188,1478,469,239,-1520,873,581,842,-1550,1363,1127,1041,-1434,
345,77,452,626,-1478,-1475,156,-1380,-801,69,-756,1646,-896,-100,1390,1074,
467,-230,-571,715,411,-1183,936,-763,-1088,454,-1652,1105,-645,-1592,1229,1267,
-1308,375,-1406,551,677,-901,-994,-1592,-1227,-717,1066,1373,908,106,-497,-747,
-240,-1416,-1023,1353,-966,1018,22,-1296,-735,314,-1160,-1186,85,-976,563,-466,
-639,225,988,-1614,139,-450,-1537,1564,-1491,942,1368,1219,1152,639,-1454,-1147,
-1635,-368,169,-187,-787,897,1371,-79,874,1267,-523,796,-927,1030,-63,-912,
-952,610,-625,967,-255,-885,-1380,1358,793,925,-1094,-859,-95,-46,607,-870,
893,-1484,-8,-1157,1433,582,-1116,875,1261,-44,892,-13,-1328,-342,745,-93,
-1377,-245,853,9,1512,-845,-1343,397,1370,881,-811,-222,-1078,-1634,649,984,
315,-1112,1365,0,-1032,-871,-458,-1599,263,-1258,1448,1168,-105,-51,-77,1522,
-1248,-637,-1606,990,-407,1480,925,-359,1621,-154,389,-1244,-1344,-129,-1219,-618,
-747,223,1010,840,1660,-36,-1486,1380,384,-1574,-252,-990,1664,1160,-272,-1537,
]
SHC512[1] = [1364,451,1094,-584,-971,701,391,1364,1601,-669,-693,699,325,-36,-1363,-736,
593,-630,633,-1452,1345,1574,1218,-1115,1391,390,-1174,-925,-926,284,-1419,717,
-736,862,1155,-667,-1570,-616,-1094,-1432,487,-240,933,-1260,-835,1019,-1091,1314,
1626,-1036,-349,-273,761,289,1397,344,-1600,-1089,274,-1085,-1270,481,-1465,-60,
-1175,-9,240,967,-1320,1362,1305,1481,-1473,-86,-1609,636,887,-1349,1600,190,
535,1306,336,86,-1566,-1360,1235,742,-968,-998,-1074,1103,-66,-746,825,731,
-1439,723,-319,-868,1262,959,555,985,-1074,598,1317,450,744,-1451,423,355,
-358,985,-523,1443,894,-100,602,-804,-963,105,-1394,-294,-1038,608,302,1589,
-539,563,914,-803,540,-402,-325,767,363,1142,-674,-46,-1569,1270,-109,683,
1191,-1053,-570,266,144,-544,19,-316,-986,-865,1256,-687,-1582,1658,-803,-822,
839,-1418,928,-915,1558,757,1290,-839,-704,1194,233,639,-639,-485,1216,-459,
1344,-1058,-1396,-463,1139,420,-751,-82,-880,19,-615,-750,13,641,-813,-629,
-82,-1582,-684,-544,619,731,-213,847,-773,-399,519,-772,-572,-1331,-1273,-388,
1260,-1252,1137,1123,1571,-364,1628,50,1638,1146,662,1499,1423,-949,772,-177,
-984,-1234,-889,220,-999,-93,202,-794,968,-1098,-447,707,-704,612,1304,-1302,
228,-109,-614,211,-184,-167,-506,-968,-920,119,-978,-870,-1357,-480,1609,1101,
]

EHC512 = [[None] for i in range(0, params.k)]
EHC512[0] = [586,296,-41,1585,-674,-41,-488,14,-232,-931,554,-107,-330,494,475,548,
-348,-1080,153,276,1473,1501,-1648,-1079,1109,199,-1264,1076,924,1517,-93,-671,
726,17,-506,1267,775,623,-1230,-698,1450,-1311,-1200,728,323,-1193,691,-619,
-921,-99,-1569,-1636,906,-738,-222,-666,-1457,185,-672,1260,1124,-736,209,515,
-610,-749,-1205,827,863,-531,-684,-187,-100,331,-826,-25,-1406,-508,944,530,
30,-1512,-1011,-765,-1532,934,-1210,-441,-811,-860,-1371,-1140,-1219,617,1662,1196,
783,-270,906,-145,-1416,600,-1604,-1563,1173,258,-1342,646,-86,-594,-1066,-853,
1237,415,-1071,-533,-497,292,528,-819,1337,421,-235,614,160,1310,374,1209,
-1574,847,-578,-169,506,1122,1546,1159,-328,-452,95,1166,-1339,691,969,487,
138,436,-1466,-974,394,315,-273,50,-137,83,198,1091,1455,85,1370,-1478,
774,465,-1475,325,440,-1165,1019,-1390,-1607,1598,441,-48,-644,931,304,-1442,
-1095,259,539,1328,-316,768,-958,-928,480,1180,-379,-872,-127,-263,-220,1518,
1287,41,-87,1481,1103,-318,-16,-506,1351,-1349,-579,-1352,636,-77,946,-1151,
366,1605,54,637,-1211,1321,-1495,-1176,734,-1158,-1368,-267,648,700,214,-558,
-1048,-101,494,920,-917,1260,-1586,-1251,838,-202,-1653,-525,927,-354,-326,-1469,
374,-920,-716,446,-856,-1170,-95,-1633,-986,-1460,1249,-247,-1318,1143,-911,-1563,
]
EHC512[1] = [-483,-977,-287,-1560,1282,-483,-495,418,611,1647,-1152,729,1455,401,1059,710,
-452,103,-1388,1320,-384,-798,-236,464,1048,-1395,-90,468,268,-1137,-24,441,
-514,699,1449,288,-815,408,367,245,1231,491,-1452,-633,586,696,-1408,-997,
389,307,348,484,-917,775,1482,-1416,750,-960,-1297,1397,761,-1249,-1196,-1134,
-973,-1557,-174,-1663,-991,1509,1503,-296,1392,724,-258,65,323,838,-381,-1105,
901,1597,-509,-842,-826,589,-796,-549,-62,642,1104,1082,302,1547,1215,811,
1112,-216,1183,-102,-1500,755,-1007,652,-1604,1469,1154,457,1426,-887,-456,-576,
-1178,80,-697,141,-708,-702,-42,1422,471,-1295,981,986,-1021,-1395,-1179,999,
-584,644,1490,-810,-126,832,367,1378,-1115,939,358,-1573,1649,-704,-261,1527,
1045,1254,1217,59,-1478,1380,-430,984,-755,-412,375,966,1320,1270,-622,5,
1583,-598,663,1066,768,-469,-1136,1222,-1480,352,-658,-764,333,855,525,1264,
-999,616,-1017,-248,-621,1550,-778,-186,-1190,489,-1646,1208,1201,-1389,-1262,729,
-765,1550,-56,590,-1197,-1156,-1454,714,270,260,240,1013,1435,934,-37,-688,
-1155,-51,1163,-1003,188,-1103,1130,-1012,1264,-94,-1597,993,717,-1390,705,-325,
648,575,-872,564,174,-771,1349,-381,-616,-207,-866,-685,951,490,-904,375,
-632,783,-1151,390,-415,-182,-1291,-1554,-528,-1562,-496,1385,-718,-310,-1408,-121,
]


def KeyGen(d: bytes=None) -> (bytes, bytes):
    if d is None:
        d = urandom(32) 
        # In hardware, required randomness provided by the "user" over a bus
        #   - random data provided via function in testbench
        #   - think of these external busses as an 'API'
    p, sigma = G(d)

    # Test value so far against C impl
    if(d == static_seed):
        assert(c_hash_g == int.from_bytes(p + sigma, 'big'))

    N = 0
    Ah = [[[[None] * 256] for i in range(0, params.k)] for j in range(0, params.k)]
    s = [[None] for i in range(0, params.k)]
    e = [[None] for i in range(0, params.k)]
    sh = [[None] for i in range(0, params.k)]
    eh = [[None] for i in range(0, params.k)]
    t = [[None] for i in range(0, params.k)]

    for i in range(0, params.k):
        for j in range(0, params.k):
            xof = XOF(p, i.to_bytes(1, 'big'), j.to_bytes(1, 'big'))   
            Ah[i][j] = SampleNTT(xof(672))
            # QUESTION: How to know how much to sample here?
            # In hardware, you have full output available after the shake process has concluded
            # Keccakf1600: in hardware: 1600 bits in, 1600 bits out
            # Shake128: Protocol determined by how you pad the input
            #   - only 1344/1600 bits are "read"
            #   - 3 rounds of XOF = 1344*3 bits 
            #       - 0.0083 % failure for 3 rounds
            #       - 2e-32 % failure for 4 rounds = 4 * 1344 bits <-- choose this to be safe
            #       - 1344 * 4 = 672 bytes
            # TODO: Create quick presentation for Mojtaba on Keccak, configurations, inputs, etc
            # TODO: Run 'high performance' Vivado package from Keccak team
            # TODO: Compare output of Keccak with Vivado output

    # Test value so far against C impl
    if(d == static_seed):
        for i in range(0, params.k):
            for i in range(0, params.k):
                assert(Ah[i][j] == AC512[i][j])

    for i in range(0, params.k):
        s[i] = SamplePolyCBD(params.n1, PRF(params.n1, sigma, N.to_bytes(1, 'big')))
        N += 1 
    for i in range(0, params.k):
        e[i] = SamplePolyCBD(params.n1, PRF(params.n1, sigma, N.to_bytes(1, 'big')))
        N += 1

    # Test value so far against C impl
    if(d == static_seed):
        for i in range(0, params.k):
            for j in range(0, 256):
                assert(SC512[i][j] == s[i][j])
                assert(EC512[i][j] == e[i][j])
    
    
    for idx, l in enumerate(s):
        sh[idx] = NTT(l)
        # first zeta: 0xfd0a
    for idx, l in enumerate(e):
        eh[idx] = NTT(l)

    # Test value so far against C impl
    if(d == static_seed):
        for i in range(0, params.k):
            for j in range(0, 256):
                assert(SHC512[i][j] == sh[i][j])
                assert(EHC512[i][j] == eh[i][j])

#   A is a k * k matrix
#   s is a k * 1 matrix
#   A*s is a k * 1 matrix
#   A*s+e is a k * 1 matrix

#   |     A     |   |  s  |   |  e  |
#   | :-- | :-- |   | :-- |   | :-- |
#   | 0,0 | 0,1 |   |  0  |   |  0  |
#   | 1,0 | 1,1 |   |  1  |   |  1  |

#   |             A * s             |
#   | :---------------------------- |
#   | A[0,0] * s[0] + A[0,1] * s[1] |
#   | A[1,0] * s[0] + A[1,1] * s[1] |

#   |     As+e     |
#   | :----------- |
#   | As[0] + e[0] |
#   | As[1] + e[1] |

    # t = A * s
    for i in range(0, params.k):
        tmp = [[None] for _ in range(0, params.k)]
        for j in range(0, params.k):
            tmp[j] = MultiplyNTTs(Ah[i][j], sh[j])
        for j in range(0, params.k - 1):
            t[i] = poly_add(tmp[j], tmp[j+1])

    # t = A * s + e
    for i in range(0, params.k):
        t[i] = poly_add(t[i], eh[i])

    # Create the Encapsulation key
    ekPKE = ByteEncode(12, t[0])
    for i in range(1, params.k):
        ekPKE += ByteEncode(12, t[i])
    ekPKE += p

    # Create the Decapsulation key
    dkPKE = ByteEncode(12, sh[0])
    for i in range(1, params.k):
        dkPKE += ByteEncode(12, sh[i])

    assert(len(ekPKE) == 384 * params.k + 32)
    assert(len(dkPKE) == 384 * params.k)

    print()
    print(Panel(ekPKE.hex(), title='ek_PKE', subtitle=f'{len(ekPKE)} bytes, {len(ekPKE) * 8} bits'))
    print()
    print(Panel(dkPKE.hex(), title='dk_PKE', subtitle=f'{len(dkPKE)} bytes, {len(dkPKE) * 8} bits'))

    return (ekPKE, dkPKE)
